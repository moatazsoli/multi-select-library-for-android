package com.luminous.pick;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.assist.ImageSize;
import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;

import java.util.ArrayList;

public class GalleryAdapter
  extends BaseAdapter
{
  private Context mContext;
  private LayoutInflater infalter;
  private ArrayList<CustomGallery> data = new ArrayList();
  ImageLoader imageLoader;
  private final String[] imageValues;
  private boolean isActionMultiplePick;
  
  private static ImageLoaderConfiguration config;
  private static DisplayImageOptions imgDisplayOptions;
    
  public GalleryAdapter(Context c, ImageLoader imageLoader, String[] values)
  {
    this.infalter = 
      ((LayoutInflater)c.getSystemService("layout_inflater"));
    this.mContext = c;
    this.imageLoader = imageLoader;
    this.imageValues = values;
    clearCache();
    
    
    
    
    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this.mContext)
    .memoryCacheSize(41943040)
    .discCacheSize(104857600)
    .threadPoolSize(10)
    .build();

  DisplayImageOptions imgDisplayOptions = new DisplayImageOptions.Builder()
    //.showStubImage(R.drawable.stub_image)
    .cacheInMemory() 
    .cacheOnDisc() 
    .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2) 
    .displayer(new RoundedBitmapDisplayer(20))
    .build();
  
  this.imageLoader.init(config);
  
  }
  
  public int getCount()
  {
    return this.data.size();
  }
  
  public CustomGallery getItem(int position)
  {
    return (CustomGallery)this.data.get(position);
  }
  
  public long getItemId(int position)
  {
    return position;
  }
  
  public void setMultiplePick(boolean isMultiplePick)
  {
    this.isActionMultiplePick = isMultiplePick;
  }
  
  public void selectAll(boolean selection)
  {
    for (int i = 0; i < this.data.size(); i++) {
      ((CustomGallery)this.data.get(i)).isSeleted = selection;
    }
    notifyDataSetChanged();
  }
  
  public boolean isAllSelected()
  {
    boolean isAllSelected = true;
    for (int i = 0; i < this.data.size(); i++) {
      if (!((CustomGallery)this.data.get(i)).isSeleted)
      {
        isAllSelected = false;
        break;
      }
    }
    return isAllSelected;
  }
  
  public boolean isAnySelected()
  {
    boolean isAnySelected = false;
    for (int i = 0; i < this.data.size(); i++) {
      if (((CustomGallery)this.data.get(i)).isSeleted)
      {
        isAnySelected = true;
        break;
      }
    }
    return isAnySelected;
  }
  
  public ArrayList<CustomGallery> getSelected()
  {
    ArrayList<CustomGallery> dataT = new ArrayList();
    for (int i = 0; i < this.data.size(); i++) {
      if (((CustomGallery)this.data.get(i)).isSeleted) {
        dataT.add((CustomGallery)this.data.get(i));
      }
    }
    return dataT;
  }
  
  public void addAll(ArrayList<CustomGallery> files)
  {
    try
    {
      this.data.clear();
      this.data.addAll(files);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    notifyDataSetChanged();
  }
  
  public void changeSelection(View v, int position)
  {
    if (((CustomGallery)this.data.get(position)).isSeleted) {
      ((CustomGallery)this.data.get(position)).isSeleted = false;
    } else {
      ((CustomGallery)this.data.get(position)).isSeleted = true;
    }
    ((ViewHolder)v.getTag()).imgQueueMultiSelected.setSelected(((CustomGallery)this.data.get(position)).isSeleted);
  }
  
  public View getView(int position, View convertView, ViewGroup parent)
  {
    convertView = this.infalter.inflate(R.layout.gallery_item, null);
    final ViewHolder holder = new ViewHolder();
    
    holder.imgQueue = 
      ((ImageView)convertView.findViewById(R.id.imgQueue));
    
    holder.imgQueueMultiSelected = 
      ((ImageView)convertView.findViewById(R.id.imgQueueMultiSelected));
    if (this.isActionMultiplePick) {
      holder.imgQueueMultiSelected.setVisibility(0);
    } else {
      holder.imgQueueMultiSelected.setVisibility(8);
    }
    convertView.setTag(holder);
    try
    {
      TextView textView = (TextView)convertView
        .findViewById(R.id.grid_item_label);
      textView.setText(this.imageValues[position]);
      holder.imgQueue.setImageResource(R.drawable.folder);
      holder.imgQueueMultiSelected.setVisibility(8);
    }
    catch (Exception e)
    {
      TextView textView = (TextView)convertView
        .findViewById(R.id.grid_item_label);
      textView.setText("");
    }
    holder.imgQueue.setTag(Integer.valueOf(position));
    try
    {
//    	BitmapFactory.Options bounds = new BitmapFactory.Options();		
//		bounds.inSampleSize = 4;
//    	Bitmap bm = BitmapFactory.decodeFile(data.get(position).sdcardPath, bounds);
//    	holder.imgQueue.setImageBitmap(bm);
        this.imageLoader.displayImage("file://" + ((CustomGallery)this.data.get(position)).sdcardPath, 
        holder.imgQueue, imgDisplayOptions);
      if (this.isActionMultiplePick) {
        holder.imgQueueMultiSelected.setSelected(((CustomGallery)this.data.get(position)).isSeleted);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return convertView;
  }
  
  public void clearCache()
  {
    this.imageLoader.clearDiscCache();
    this.imageLoader.clearMemoryCache();
  }
  
  public void clear()
  {
    this.data.clear();
    notifyDataSetChanged();
  }
  
  public class ViewHolder
  {
    ImageView imgQueue;
    ImageView imgQueueMultiSelected;
    
    public ViewHolder() {}
  }
}
