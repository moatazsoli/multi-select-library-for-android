package com.luminous.pick;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ImageView;

import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;

public class CustomGalleryActivity
  extends Activity
{
  GridView gridGallery;
  Handler handler;
  GalleryAdapter adapter;
  Cursor tempPiccursor;
  String[] subDir;
  ArrayList<String> currentDirectory;
  String mDirectory;
  ImageView imgNoMedia;
  Button btnGalleryOk;
  Cursor imagecursor;
  String action;
  private ImageLoader imageLoader;
  
  public void onCreate(Bundle savedInstanceState)
  {
    super.onCreate(savedInstanceState);
    requestWindowFeature(1);
    setContentView(R.layout.gallery);
    
    this.currentDirectory = new ArrayList();
    this.action = getIntent().getAction();
    if (this.action == null) {
      finish();
    }
    String path = Environment.getExternalStorageDirectory().getAbsolutePath();
    this.currentDirectory.add(path);
    initFolders(path);
  }
  
  private void initFolders(String directory)
  {
    this.mDirectory = directory;
    

    String[] columns = { "bucket_display_name", "_data", 
      "_display_name", 
      "_id" };
    String orderBy = "bucket_display_name";
    
    String sa1 = "%" + directory + "%";
    
    Cursor tempImagecursor = getContentResolver().query(
      MediaStore.Images.Media.EXTERNAL_CONTENT_URI, columns, 
      "_data LIKE ?", new String[] { sa1 }, "bucket_display_name");
    
    this.imagecursor = tempImagecursor;
    HashSet<String> directories = new HashSet();
    Cursor loopingCursor = tempImagecursor;
    try
    {
      if ((loopingCursor != null) && (loopingCursor.getCount() > 0)) {
        while (loopingCursor.moveToNext())
        {
          int dataColumnIndex = loopingCursor
            .getColumnIndex("_data");
          
          int displayColumnIndex = loopingCursor
            .getColumnIndex("_display_name");
          
          int bucketColumn = loopingCursor.getColumnIndex(
            "bucket_display_name");
          
          String dir = loopingCursor.getString(dataColumnIndex).substring(0, loopingCursor.getString(dataColumnIndex).length() - loopingCursor.getString(displayColumnIndex).length());
          


          int rootDirLength = dir.indexOf(directory) + directory.length() + 1;
          if (dir.indexOf("/", rootDirLength) != -1) {
            directories.add(dir);
          }
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    String[] folders = new String[directories.size()];
    Iterator it = directories.iterator();
    int i = 0;
    while (it.hasNext())
    {
      folders[i] = ((String)it.next());
      i++;
    }
    HashSet<String> subFolders = new HashSet();
    for (i = 0; i < folders.length; i++)
    {
      int rootDirLength = folders[i].indexOf(directory) + directory.length() + 1;
      if (rootDirLength == -1) {
        rootDirLength = 0;
      }
      int endStr = folders[i].indexOf("/", rootDirLength);
      if (endStr == -1) {
        endStr = rootDirLength;
      }
      subFolders.add(folders[i].substring(rootDirLength, endStr));
    }
    this.subDir = new String[subFolders.size()];
    it = subFolders.iterator();
    i = 0;
    while (it.hasNext())
    {
      this.subDir[i] = ((String)it.next());
      i++;
    }
    initImageLoader();
    init();
  }
  
  private void initImageLoader()
  {
    DisplayImageOptions defaultOptions = new DisplayImageOptions.Builder()
      .cacheOnDisc().imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
      .bitmapConfig(Bitmap.Config.RGB_565).build();
    ImageLoaderConfiguration.Builder builder = new ImageLoaderConfiguration.Builder(
      this).defaultDisplayImageOptions(defaultOptions).memoryCache(
      new WeakMemoryCache());
    
    ImageLoaderConfiguration config = builder.build();
    this.imageLoader = ImageLoader.getInstance();
    this.imageLoader.init(config);
  }
  
  private void init()
  {
    this.handler = new Handler();
    this.gridGallery = ((GridView)findViewById(R.id.gridGallery));
    this.gridGallery.setFastScrollEnabled(true);
    this.adapter = new GalleryAdapter(getApplicationContext(), this.imageLoader, this.subDir);
    if (this.action.equalsIgnoreCase("luminous.ACTION_MULTIPLE_PICK"))
    {
      findViewById(R.id.llBottomContainer).setVisibility(0);
      this.gridGallery.setOnItemClickListener(this.mItemMulClickListener);
      this.adapter.setMultiplePick(true);
    }
    else if (this.action.equalsIgnoreCase("luminous.ACTION_PICK"))
    {
      findViewById(R.id.llBottomContainer).setVisibility(8);
      this.gridGallery.setOnItemClickListener(this.mItemSingleClickListener);
      this.adapter.setMultiplePick(false);
    }
    this.gridGallery.setAdapter(this.adapter);
    this.imgNoMedia = ((ImageView)findViewById(R.id.imgNoMedia));
    
    this.btnGalleryOk = ((Button)findViewById(R.id.btnGalleryOk));
    
    this.btnGalleryOk.setOnClickListener(this.mOkClickListener);
    
    new Thread()
    {
      public void run()
      {
        Looper.prepare();
        CustomGalleryActivity.this.handler.post(new Runnable()
        {
          public void run()
          {
            CustomGalleryActivity.this.adapter.addAll(CustomGalleryActivity.this.getGalleryFolders());
            CustomGalleryActivity.this.checkImageStatus();
          }
        });
        Looper.loop();
      }
    }.start();
  }
  
  private void checkImageStatus()
  {
    if (this.adapter.isEmpty()) {
      this.imgNoMedia.setVisibility(0);
    } else {
      this.imgNoMedia.setVisibility(8);
    }
  }
  
  @Override
  public void onBackPressed() {
	 
	      if (CustomGalleryActivity.this.currentDirectory.size() > 1)
	      {
	        int index = CustomGalleryActivity.this.currentDirectory.size() - 1;
	        CustomGalleryActivity.this.currentDirectory.remove(index);
	        
	        String newFolder = (String)CustomGalleryActivity.this.currentDirectory.get(index - 1);
	        CustomGalleryActivity.this.initFolders(newFolder);
	      }else{
	    	  finish();
	      }
  
  }
  
  View.OnClickListener mOkClickListener = new View.OnClickListener()
  {
    public void onClick(View v)
    {
      ArrayList<CustomGallery> selected = CustomGalleryActivity.this.adapter.getSelected();
      
      String[] allPath = new String[selected.size()];
      for (int i = 0; i < allPath.length; i++) {
        allPath[i] = ((CustomGallery)selected.get(i)).sdcardPath;
      }
      Intent data = new Intent().putExtra("all_path", allPath);
      CustomGalleryActivity.this.setResult(-1, data);
      CustomGalleryActivity.this.finish();
    }
  };
  AdapterView.OnItemClickListener mItemMulClickListener = new AdapterView.OnItemClickListener()
  {
    public void onItemClick(AdapterView<?> l, View v, int position, long id)
    {
      if (CustomGalleryActivity.this.adapter.getItem(position).isFolder)
      {
        String path = CustomGalleryActivity.this.adapter.getItem(position).sdcardPath;
        CustomGalleryActivity.this.currentDirectory.add(path);
        CustomGalleryActivity.this.initFolders(path);
      }
      else
      {
        CustomGalleryActivity.this.adapter.changeSelection(v, position);
      }
    }
  };
  AdapterView.OnItemClickListener mItemSingleClickListener = new AdapterView.OnItemClickListener()
  {
    public void onItemClick(AdapterView<?> l, View v, int position, long id)
    {
      CustomGallery item = CustomGalleryActivity.this.adapter.getItem(position);
      Intent data = new Intent().putExtra("single_path", item.sdcardPath);
      CustomGalleryActivity.this.setResult(-1, data);
      CustomGalleryActivity.this.finish();
    }
  };
  
  
  private ArrayList<CustomGallery> getGalleryFolders()
  {
    ArrayList<CustomGallery> galleryList = new ArrayList();
    try
    {
      String[] columns = { "bucket_display_name", "_data" };
      String orderBy = "bucket_display_name";
      
      String sa1 = "%" + this.mDirectory + "%";
      
      Cursor tempImagecursor = getContentResolver().query(
        MediaStore.Images.Media.EXTERNAL_CONTENT_URI, columns, 
        "bucket_display_name LIKE ?", new String[] { sa1 }, "bucket_display_name");
      
      this.imagecursor = tempImagecursor;
      while (this.imagecursor.moveToNext())
      {
        CustomGallery item = new CustomGallery();
        
        int dataColumnIndex = this.imagecursor
          .getColumnIndex("_data");
        
        item.sdcardPath = this.imagecursor.getString(dataColumnIndex);
        galleryList.add(item);
      }
      int i = 0;
      for (i = 0; i < this.subDir.length; i++)
      {
        CustomGallery item = new CustomGallery();
        item.sdcardPath = this.subDir[(this.subDir.length - i - 1)];
        item.isFolder = true;
        galleryList.add(item);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    Collections.reverse(galleryList);
    return galleryList;
  }
}
